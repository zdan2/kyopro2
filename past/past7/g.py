'''一意的な表現（バランスされた三進法表記）を求めるには、
与えられた整数を「-1,0,1」を桁とする三進表記（バランス三進表記）へと変換する確立した手順を用いることができます。
以下は代表的な変換手順の一例です。

バランスされた三進法への変換手順
整数 𝑛
n をバランスされた三進法で表すには、以下のステップで行います。

基本的な考え方
通常の三進法では、整数𝑛
n を 3 で割った余りは {0,1,2}
{0,1,2} のいずれかになります。
バランスされた三進法では、桁が{−1,0,1}
{−1,0,1} のいずれかで表したいので、もし余りが 2 の場合、「2」を「-1」に相当する値として処理し、上位桁に1を繰り上げる（キャリーする）操作を行います。

具体的なアルゴリズム:

𝑛≠0
n=0 なら以下を繰り返す:
𝑛
n を 3 で割り、商を 𝑞q、余りを 𝑟r とする（ここで通常の整数除算と剰余を使う: 𝑛=3𝑞+𝑟n=3q+r,
𝑟∈{0,1,2}
r∈{0,1,2}）。
余り 𝑟r に応じて以下のように処理する：
𝑟=0
r=0: バランス三進の下位桁は 0。そのまま上位桁計算へ進む（𝑛=𝑞n=q に更新）。
𝑟=1
r=1: バランス三進の下位桁は +1。そのまま上位桁計算へ進む（𝑛=𝑞n=q に更新）。
𝑟=2
r=2: バランス三進の下位桁は -1 (T) とし、さらに繰り上げを行うため、𝑛=𝑞+1n=q+1 として次のステップへ進む。
この操作を 𝑛n が 0 になるまで繰り返します。

例： 例えば、𝑛=5
n=5 をバランスされた三進法に変換する手順は下記の通りです。

5÷3=1
5÷3=1 余り 2
2
余りが2なので、下位桁は -1 (T) 、繰り上げのため 
𝑛=1+1=2
n=1+1=2 に変更
2÷3=0
2÷3=0 余り 2
2
再び余り2なので下位桁は -1 (T)、繰り上げで 
𝑛=0+1=1
n=0+1=1
1÷3=0
1÷3=0 余り 1
1
余り1なので下位桁は +1、
𝑛=0
n=0 となって終了
下位桁から並べると「+1, -1, -1」となり、バランスされた三進法では 
1𝑇𝑇
1TT （Tは-1を表す記号）となります。

一意性の保証
上記の手順は任意の整数に対して一意のバランスされた三進表現を与えます。つまり、同じ整数が別の方法で表現されることはなく、
常にこの手順を踏めば同一の桁列が得られます。'''

n=int(input())
a=[]
while n>0:
    q,r=divmod(n,3)
    if r==0:
        a.append(0)
        n=q
    elif r==1:
        a.append(1)
        n=q
    else:
        a.append(-1)
        n=q+1
c=[]
for i,e in enumerate(a):
    if e==1:
        c.append(3**i)
    elif e==-1:
        c.append((3**i)*-1)
print(len(c))
print(*c)